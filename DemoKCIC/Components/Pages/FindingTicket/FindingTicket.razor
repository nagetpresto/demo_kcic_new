@page "/finding-ticket"

@using DemoKCIC.Server.Models.Master
@using DemoKCIC.Server.Models.FindingTicket
@using DemoKCIC.Server.Services.FindingTicket
@using Newtonsoft.Json
@inject IFindingTicketService FindingTicketService
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime


<PageTitle>Finding Ticket</PageTitle>

<h1>Finding Ticket</h1>
<hr />

<div class="form-group row">
    <div class="col-sm-3">
        <label for="LanguageSelect" class="col-form-label">Language</label>
    </div>
    <div class="col-sm-9">
        <select id="LanguageSelect" class="form-control" @bind="selectedLanguage">
            <option value="">Select Language</option>
            @foreach (var language in languages)
            {
                <option value="@language.CodeSTT">@language.Description</option>
            }
        </select>
    </div>
</div>

<div class="form-group row">
    <div class="col-sm-3">
        <button class="@ButtonBgClass" @onclick="ToggleRecording" disabled="@(!IsButtonEnabled || isRecording)">
            <span class="@ButtonIconClass"></span>
        </button>
    </div>

    <div class="col-sm-9">
        <textarea id="TextInput" class="form-control" rows="5" @bind="inputValue"></textarea>
    </div>
</div>

<div class="form-group row">
    <h5>Tiket Berangkat</h5>
    @if (tiketBerangkat.Any())
    {
        <div class="table-responsive">
            <table id="tiketBerangkatTable" class="table table-bordered table-hover">
                <thead class="thead-dark">
                    <tr>
                        <th>No</th>
                        <th>Train Number</th>
                        <th>From</th>
                        <th>To</th>
                        <th>Date</th>
                        <th>Departure Time</th>
                        <th>Arrival Time</th>
                        <th>Class</th>
                        <th>Price</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var ticket in tiketBerangkat)
                    {
                        <tr>
                            <td>@ticket.ID</td>
                            <td>@ticket.TrainNumber</td>
                            <td>@ticket.From</td>
                            <td>@ticket.To</td>
                            <td>@ticket.Date</td>
                            <td>@ticket.DepartureTime</td>
                            <td>@ticket.ArrivalTime</td>
                            <td>@ticket.Class</td>
                            <td>@ticket.Price</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <p>Nothing to be displayed</p>
    }
</div>

<div class="form-group row">
    <h5>Tiket Pulang</h5>
    @if (tiketPulang.Any())
    {
        <div class="table-responsive">
            <table id="tiketPulangTable" class="table table-bordered table-hover">
                <thead class="thead-dark">
                    <tr>
                        <th>No</th>
                        <th>Train Number</th>
                        <th>From</th>
                        <th>To</th>
                        <th>Date</th>
                        <th>Departure Time</th>
                        <th>Arrival Time</th>
                        <th>Class</th>
                        <th>Price</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var ticket in tiketPulang)
                    {
                        <tr>
                            <td>@ticket.ID</td>
                            <td>@ticket.TrainNumber</td>
                            <td>@ticket.From</td>
                            <td>@ticket.To</td>
                            <td>@ticket.Date</td>
                            <td>@ticket.DepartureTime</td>
                            <td>@ticket.ArrivalTime</td>
                            <td>@ticket.Class</td>
                            <td>@ticket.Price</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <p>Nothing to be displayed</p>
    }
</div>


@code {
    private List<MasterLanguages> languages = new List<MasterLanguages>();
    private List<MasterWilayah> masterWilayah = new List<MasterWilayah>();
    private List<TicketList> tiketBerangkat = new List<TicketList>();
    private List<TicketList> tiketPulang = new List<TicketList>();
    private string selectedLanguage;
    private string inputValue = string.Empty;
    private string jsonString = string.Empty;
    private string fromCode = string.Empty;
    private string toCode = string.Empty;
    private string fromDate = string.Empty;
    private string toDate = string.Empty;
    private bool isTermurah = false;
    private bool isRecording = false;

    private string ButtonIconClass => isRecording ? "bi bi-stop-fill" : "bi bi-mic-fill";
    private string ButtonBgClass => isRecording ? "btn btn-danger" : "btn btn-primary";

    private bool IsButtonEnabled => !string.IsNullOrEmpty(selectedLanguage);

    protected override async Task OnInitializedAsync()
    {
        languages = new List<MasterLanguages>
        {
            new MasterLanguages
            {
                ID = 1,
                CodeTTS = "id-ID-ArdiNeural",
                CodeSTT = "id-ID",
                Description = "Indonesian (Indonesia)"
            },
            new MasterLanguages
            {
                ID = 2,
                CodeTTS = "en-US-AvaMultilingualNeural",
                CodeSTT = "en-US",
                Description = "English (United States)"
            }
        };

        masterWilayah = new List<MasterWilayah>
        {
            new MasterWilayah
            {
                Code = "IDKGA",
                Name = "Karawang"
            },
            new MasterWilayah
            {
                Code = "IDHMA",
                Name = "Halim"
            },
            new MasterWilayah
            {
                Code = "IDPGA",
                Name = "Padalarang"
            },
            new MasterWilayah
            {
                Code = "IDTLA",
                Name = "Tegalluar Sumaraecon"
            }
        };

        await Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Initialize DataTables
        await JSRuntime.InvokeVoidAsync("eval", @"
                $(document).ready(function() {
                    $('#tiketBerangkatTable').DataTable();
                    $('#tiketPulangTable').DataTable();
                });
            ");
    }

    private async Task ToggleRecording()
    {
        isRecording = !isRecording;

        try
        {
            if (isRecording)
            {
                // start recording
                inputValue = string.Empty;
                inputValue = await FindingTicketService.StartRecordingAsync(selectedLanguage);
                inputValue = "cari tiket kawang suma rekon tanggal 20 januari 2025 sampai 23 januari 2025";
                isRecording = false;
                jsonString = await FindingTicketService.ExtractPromptAsync("[{\"code\":\"IDHMA\",\"name\":\"Halim\"},{\"code\":\"IDKGA\",\"name\":\"Karawang\"},{\"code\":\"IDPGA\",\"name\":\"Padalarang\"},{\"code\":\"IDTLA\",\"name\":\"TegaluarSummarecon/Bandung\"}]." + inputValue + ". jadikan bentuk json object dengan field From (ambil code), To (ambil code), DepartureDate (YYYYMMDD), ArrivaleDate (YYYYMMDD), IsTermurah (boolean). Beri null/false jika tidak ada valuenya");
                Console.WriteLine(jsonString);

                // get input information
                var ticketInfo = JsonConvert.DeserializeObject<dynamic>(jsonString);
                string fromCode = ticketInfo?.From?.ToString() ?? string.Empty;
                string toCode = ticketInfo?.To?.ToString() ?? string.Empty;
                fromDate = ticketInfo?.DepartureDate?.ToString() ?? string.Empty;
                toDate = ticketInfo?.ArrivalDate?.ToString() ?? string.Empty;
                isTermurah = ticketInfo?.IsTermurah == true ? true : false;
                Console.WriteLine(fromCode + "," + toCode + "," + fromDate + "," + toDate);

                // get ticket berangkat kcic
                var tiketBerangkatList = JsonConvert.DeserializeObject<dynamic>(await FindingTicketService.GetTicket(fromCode, toCode, fromDate));

                // tiket brangkat
                tiketBerangkat.Clear();
                if (tiketBerangkatList != null)
                {
                    foreach (var ticket in tiketBerangkatList)
                    {
                        // termurah
                        if (isTermurah){

                            var tiket = new TicketList
                                {
                                    ID = tiketBerangkat.Count + 1,
                                    TrainNumber = ticket.trainCode?.ToString() ?? string.Empty,
                                    From = fromCode,
                                    To = toCode,
                                    Date = ConvertToDateFormat(ticket.trainDate?.ToString() ?? string.Empty),
                                    DepartureTime = ConvertToTimeFormat(ticket.startTime?.ToString() ?? string.Empty),
                                    ArrivalTime = ConvertToTimeFormat(ticket.arriveTime?.ToString() ?? string.Empty),
                                    Price = ticket.lowestPrice?["360"] ?? 0,
                                    Class = "Premium Economy Class"

                                };

                            tiketBerangkat.Add(tiket);
                        }

                        // all price
                        else{
                            var prices = ticket.priceData;

                            foreach (var price in prices)
                            {
                                var tiket = new TicketList
                                    {
                                        ID = tiketBerangkat.Count + 1,
                                        TrainNumber = ticket.trainCode?.ToString() ?? string.Empty,
                                        From = fromCode,
                                        To = toCode,
                                        Date = ConvertToDateFormat(ticket.trainDate?.ToString() ?? string.Empty),
                                        DepartureTime = ConvertToTimeFormat(ticket.startTime?.ToString() ?? string.Empty), // Convert the startTime
                                        ArrivalTime = ConvertToTimeFormat(ticket.arriveTime?.ToString() ?? string.Empty), // Convert the arriveTime
                                        Price = price.mulCurrencyPriceData["360"].ticketPrice ?? 0,
                                        Class = price.seatType?.ToString() == "9" ? "First Class" : price.seatType?.ToString() == "M" ? "Business Class" : "Premium Economy Class"
                                    };

                                tiketBerangkat.Add(tiket);
                            }
                        }
                        
                    }
                }
                Console.WriteLine("Tiket Berangkat Count: " + tiketBerangkat.Count);
                
                // tiket pulang
                if (toDate != null){
                    var tiketPulangList = JsonConvert.DeserializeObject<dynamic>(await FindingTicketService.GetTicket(toCode, fromCode, toDate));
                    tiketPulang.Clear();

                    foreach (var ticket in tiketPulangList)
                    {
                        // termurah
                        if (isTermurah)
                        {

                            var tiket = new TicketList
                                {
                                    ID = tiketPulang.Count + 1,
                                    TrainNumber = ticket.trainCode?.ToString() ?? string.Empty,
                                    From = fromCode,
                                    To = toCode,
                                    Date = ConvertToDateFormat(ticket.trainDate?.ToString() ?? string.Empty),
                                    DepartureTime = ConvertToTimeFormat(ticket.startTime?.ToString() ?? string.Empty),
                                    ArrivalTime = ConvertToTimeFormat(ticket.arriveTime?.ToString() ?? string.Empty),
                                    Price = ticket.lowestPrice?["360"] ?? 0,
                                    Class = "Premium Economy Class"

                                };

                            tiketPulang.Add(tiket);
                        }

                        // all price
                        else
                        {
                            var prices = ticket.priceData;

                            foreach (var price in prices)
                            {
                                var tiket = new TicketList
                                    {
                                        ID = tiketPulang.Count + 1,
                                        TrainNumber = ticket.trainCode?.ToString() ?? string.Empty,
                                        From = fromCode,
                                        To = toCode,
                                        Date = ConvertToDateFormat(ticket.trainDate?.ToString() ?? string.Empty),
                                        DepartureTime = ConvertToTimeFormat(ticket.startTime?.ToString() ?? string.Empty), // Convert the startTime
                                        ArrivalTime = ConvertToTimeFormat(ticket.arriveTime?.ToString() ?? string.Empty), // Convert the arriveTime
                                        Price = price.mulCurrencyPriceData["360"].ticketPrice ?? 0,
                                        Class = price.seatType?.ToString() == "9" ? "First Class" : price.seatType?.ToString() == "M" ? "Business Class" : "Premium Economy Class"
                                    };

                                tiketPulang.Add(tiket);
                            }
                        }

                    }
                }
                Console.WriteLine("Tiket Pulang Count: " + tiketPulang.Count);

                StateHasChanged();

                await OnAfterRenderAsync(true);
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine("");
            Console.WriteLine($"Error in FindingTicket Page: {ex.Message}");
        }

    }

    private string ConvertToDateFormat(string date)
    {
        if (DateTime.TryParseExact(date, "yyyyMMdd", null, System.Globalization.DateTimeStyles.None, out DateTime parsedDate))
        {
            return parsedDate.ToString("dd-MM-yyyy");
        }
        return string.Empty;
    }

    private string ConvertToTimeFormat(string time)
    {
        if (DateTime.TryParseExact(time, "HHmm", null, System.Globalization.DateTimeStyles.None, out DateTime parsedTime))
        {
            return parsedTime.ToString("HH:mm");
        }
        return string.Empty;
    }
}
